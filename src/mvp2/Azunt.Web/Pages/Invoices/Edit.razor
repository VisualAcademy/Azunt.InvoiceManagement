@page "/invoices/edit"
@page "/invoices/edit/{Id:long}"
@inject BillingDbContext Db
@inject IInvoiceService InvoiceSvc
@inject IInvoicePdfService PdfSvc
@inject IFileStorage Files
@inject IEmailSender Email
@inject NavigationManager Nav

<h3>Invoice Edit</h3>

@if (_inv is not null)
{
    <div class="alert alert-secondary d-flex align-items-center justify-content-between">
        <div class="form-check form-switch">
            <InputCheckbox @bind-Value="_inv.ApplyTax" class="form-check-input" />
            <label class="form-check-label ms-2">Apply Tax</label>
        </div>
        <div class="d-flex align-items-center">
            <label class="me-2">Tax Rate</label>
            <InputNumber @bind-Value="_inv.TaxRate" step="0.01" class="form-control w-auto" />
        </div>
        <button class="btn btn-outline-primary" @onclick="Recalc">Recalculate</button>
    </div>
}


@if (_inv is null && Id is null)
{
    <EditForm Model="_draft" OnValidSubmit="CreateDraftAsync">
        <DataAnnotationsValidator />
        <div class="card mb-3">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Tenant</label>
                        <InputText class="form-control" @bind-Value="_draft.TenantId" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Customer</label>
                        <InputSelect class="form-select" @bind-Value="_draft.CustomerId">
                            @foreach (var c in _customers)
                            {
                                <option value="@c.Id">@c.OrganizationName</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Currency</label>
                        <input class="form-control" value="USD" disabled />
                    </div>
                </div>
                <div class="mt-3">
                    <button class="btn btn-primary" type="submit">Create Draft</button>
                    <a class="btn btn-secondary ms-2" href="/invoices/manage">Cancel</a>
                </div>
            </div>
        </div>
    </EditForm>
}
else if (_inv is null)
{
    <p>Loading...</p>
}
else
{
    <div class="d-flex justify-content-between align-items-center">
        <h5>Editing: @(_inv.InvoiceNumber ?? "(unissued)")</h5>
        <div>
            <a class="btn btn-secondary btn-sm" href="/invoices/manage">Back</a>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p class="mb-1"><b>Id:</b> @_inv.Id</p>
                    <p class="mb-1"><b>Status:</b> @_inv.Status</p>
                    <p class="mb-1"><b>Customer:</b> @_inv.Customer?.OrganizationName</p>
                </div>
                <div class="col-md-6 text-end">
                    <p class="mb-1"><b>Total:</b> @_inv.Total.ToString("N2") @_inv.Currency</p>
                    @if (!string.IsNullOrEmpty(_inv.PdfPath))
                    {
                        <a class="btn btn-outline-secondary btn-sm" target="_blank" href="@Files.GetPublicUrl(_inv.PdfPath)">Open PDF</a>
                    }
                </div>
            </div>
        </div>
    </div>

    <h6>Add Item</h6>
    <div class="row g-2 align-items-end">
        <div class="col-md-6">
            <label class="form-label">Description</label>
            <InputText class="form-control" @bind-Value="_newItem.Description" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Qty</label>
            <InputNumber class="form-control" @bind-Value="_newItem.Quantity" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Unit Price</label>
            <InputNumber class="form-control" @bind-Value="_newItem.UnitPrice" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" @onclick="AddItemAsync">Add</button>
        </div>
    </div>

    <div class="mt-3">
        <table class="table table-sm">
            <thead>
                <tr><th>#</th><th>Description</th><th class="text-end">Qty</th><th class="text-end">Unit</th><th class="text-end">Amount</th></tr>
            </thead>
            <tbody>
                @for (var idx = 0; idx < _inv.Items.Count; idx++)
                {
                    var it = _inv.Items[idx];
                    <tr>
                        <td>@(idx+1)</td>
                        <td>@it.Description</td>
                        <td class="text-end">@it.Quantity.ToString("0.##")</td>
                        <td class="text-end">@it.UnitPrice.ToString("N2")</td>
                        <td class="text-end">@((it.Quantity * it.UnitPrice).ToString("N2"))</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <button class="btn btn-success me-2" @onclick="IssueAndSendAsync">Issue &amp; Send</button>
        <a class="btn btn-secondary" href="/invoices/details/@_inv.Id">Go to Details</a>
    </div>
}

@code { 
    void Recalc() { _inv?.RecalculateTotals(_inv?.TaxRate); StateHasChanged(); }

    [Parameter] public long? Id { get; set; }
    private Invoice? _inv;
    private List<Customer> _customers = new();

    private NewDraft _draft = new() { TenantId = "TENANT-DEMO", CustomerId = 1, Currency = "USD" };
    private NewItem _newItem = new();

    protected override async Task OnInitializedAsync()
    {
        _customers = await Db.Customers.OrderBy(c => c.OrganizationName).ToListAsync();
        if (Id is not null)
        {
            _inv = await InvoiceSvc.GetAsync(Id.Value);
        }
    }

    private async Task CreateDraftAsync()
    {
        _inv = await InvoiceSvc.CreateDraftAsync(_draft.TenantId, _draft.CustomerId, _draft.Currency);
        _inv = await InvoiceSvc.GetAsync(_inv.Id);
        StateHasChanged();
    }

    private async Task AddItemAsync()
    {
        if (_inv is null) return;
        if (string.IsNullOrWhiteSpace(_newItem.Description) || _newItem.Quantity <= 0 || _newItem.UnitPrice < 0) return;
        await InvoiceSvc.AddItemAsync(_inv.Id, _newItem.Description, _newItem.Quantity, _newItem.UnitPrice);
        _newItem = new();
        _inv = await InvoiceSvc.GetAsync(_inv.Id);
        StateHasChanged();
    }

    private async Task IssueAndSendAsync()
    {
        if (_inv is null || _inv.Customer is null) return;
        if (_inv.Status == InvoiceStatus.Draft)
            await InvoiceSvc.IssueAsync(_inv.Id);

        var pdf = await PdfSvc.GenerateInvoicePdfAsync(_inv, _inv.Customer);
        var filePath = await Files.SaveAsync($"{_inv.InvoiceNumber}.pdf", pdf);
        _inv.PdfPath = filePath;
        await Db.SaveChangesAsync();

        var url = Files.GetPublicUrl(filePath);
        await Email.SendInvoiceEmailAsync(_inv, _inv.Customer, pdf, url);
        await InvoiceSvc.MarkSentAsync(_inv.Id);

        Nav.NavigateTo($"/invoices/details/{_inv.Id}", forceLoad: true);
    }

    public class NewDraft
    {
        public string TenantId { get; set; } = "TENANT-DEMO";
        public long CustomerId { get; set; } = 1;
        public string Currency { get; set; } = "USD";
    }
    public class NewItem
    {
        public string Description { get; set; } = string.Empty;
        public decimal Quantity { get; set; } = 1;
        public decimal UnitPrice { get; set; } = 0;
    }
}
